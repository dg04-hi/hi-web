# .github/workflows/web-ci.yml (검증 로직 제거된 안정 버전)
name: Web Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]  
  workflow_dispatch:

env:
  ACR_NAME: acrdigitalgarage03
  IMAGE_NAME: hiorder/frontend
  MANIFEST_REPO: dg04-hi/hi-manifest
  
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.image-tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Clean install dependencies
      run: |
        rm -f package-lock.json
        npm install
        
    - name: Build application
      run: |
        export CI=false
        npm run build
      
    - name: Generate metadata
      id: meta
      run: |
        BUILD_TIME=$(date +'%y%m%d%H%M')
        echo "image-tag=${BUILD_TIME}" >> $GITHUB_OUTPUT
        echo "🏷️ Generated image tag: ${BUILD_TIME}"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Build and push Docker image
      run: |
        IMAGE_TAG="${{ steps.meta.outputs.image-tag }}"
        FULL_IMAGE="${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        LATEST_IMAGE="${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest"
        
        echo "🔨 Building and pushing Docker images..."
        echo "  📦 Tag: ${IMAGE_TAG}"
        echo "  🖼️ Images: ${FULL_IMAGE}, ${LATEST_IMAGE}"
        
        # 빌드 및 푸시
        docker build -t ${FULL_IMAGE} -f ./deployment/container/Dockerfile .
        docker tag ${FULL_IMAGE} ${LATEST_IMAGE}
        
        docker push ${FULL_IMAGE}
        docker push ${LATEST_IMAGE}
        
        echo "🎉 Images pushed successfully!"

  update-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout manifest repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.MANIFEST_REPO }}
        token: ${{ secrets.MANIFEST_TOKEN }}
        path: manifest-repo
        
    - name: Update Kubernetes manifest
      run: |
        cd manifest-repo/web
        
        IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
        NEW_IMAGE="${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        
        echo "🔄 Updating deployment.yaml with tag: ${IMAGE_TAG}"
        
        # 이미지 태그 업데이트
        sed -i "s|image: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:.*|image: ${NEW_IMAGE}|g" deployment.yaml
        
        echo "✅ Updated to: ${NEW_IMAGE}"
        
    - name: Commit and push manifest changes
      run: |
        cd manifest-repo
        
        git config --local user.email "wjsgksdnf11@naver.com"
        git config --local user.name "hanwool77"
        
        git add web/deployment.yaml
        
        if ! git diff --staged --quiet; then
          IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          git commit -m "🚀 Update web frontend image to ${IMAGE_TAG}"
          git push
          echo "✅ Manifest updated successfully!"
        else
          echo "📋 No changes to commit"
        fi